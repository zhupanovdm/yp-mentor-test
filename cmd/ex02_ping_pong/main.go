// Демонстрирует синхронную коммуникацию горутин через каналы.
// Представим, есть 2 игрока в пинг-понг. Первый игрок начинает, подает мяч второму игроку, который должен обязательно
// отбить подачу, затем первый игрок повторяет подачу мяча.
package main

import (
	"fmt"
	"time"
)

func main() {
	// Канал коммуникации игроков - способ отбить мяч соперника.
	ch := make(chan string)

	go player1(ch)
	go player2(ch)

	// Подождем, пока наиграются. :)
	time.Sleep(10 * time.Second)
}

// Первый игрок подает мяч.
func player1(ch chan string) {
	for {
		// Имитируем размах ракеткой, этот явно медленней размахивает ракеткой. :)
		time.Sleep(500 * time.Millisecond)

		// После отправки будет заблокирован, пока другой игрок не примет мяч.
		ch <- "ping"

		// Будет ждать, пока не вернется мяч от соперника.
		fmt.Println("P1:", <-ch)
	}
}

// Второй игрок отбивает мяч.
func player2(ch chan string) {
	for {
		// Будет ждать, пока не придет мяч от соперника.
		fmt.Println("P2:", <-ch)

		// Имитируем размах ракеткой.
		time.Sleep(300 * time.Millisecond)

		// После отправки будет заблокирован, пока другой игрок не примет мяч.
		ch <- "pong"
	}
}
